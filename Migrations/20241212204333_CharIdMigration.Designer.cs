// <auto-generated />
using System.Collections.Generic;
using CharacterManager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CharacterManager.Migrations
{
    [DbContext(typeof(CharacterManagerDbContext))]
    [Migration("20241212204333_CharIdMigration")]
    partial class CharIdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackgroundItem", b =>
                {
                    b.Property<int>("BackgroundsId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer");

                    b.HasKey("BackgroundsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("BackgroundItem");
                });

            modelBuilder.Entity("CharacterManager.Models.AbilityScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ability")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("AbilityScores");
                });

            modelBuilder.Entity("CharacterManager.Models.Background", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BackgroundLanguage")
                        .HasColumnType("integer");

                    b.Property<int?>("BackgroundTraitId")
                        .HasColumnType("integer");

                    b.Property<string>("Bond")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Flaw")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ideal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalityTrait")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillProf1")
                        .HasColumnType("integer");

                    b.Property<int>("SkillProf2")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundTraitId");

                    b.ToTable("Backgrounds");
                });

            modelBuilder.Entity("CharacterManager.Models.BackgroundItem", b =>
                {
                    b.Property<int>("BackgroundId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("BackgroundId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("BackgroundItems");
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("integer");

                    b.Property<int>("HitDieNumber")
                        .HasColumnType("integer");

                    b.Property<int>("InitiativeBonus")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("Languages")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("ProficientSkills")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.PrimitiveCollection<int[]>("Skills")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("Tools")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterItem", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItems");
                });

            modelBuilder.Entity("CharacterManager.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasSpells")
                        .HasColumnType("boolean");

                    b.Property<int?>("HitDiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProficientAbility1")
                        .HasColumnType("integer");

                    b.Property<int>("ProficientAbility2")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("ProficientSkillOptions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("SpellCastingAbility")
                        .HasColumnType("integer");

                    b.Property<int?>("StartingGoldDiceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HitDiceId")
                        .IsUnique();

                    b.HasIndex("StartingGoldDiceId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassItem", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("ClassItems");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassProficiency", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("ProficienciesId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "ProficienciesId");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("ClassProficiencies");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassSpell", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("SpellsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("ClassSpells");
                });

            modelBuilder.Entity("CharacterManager.Models.Dice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BelongToClassId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsGoldDie")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHitDie")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfDice")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Dice");
                });

            modelBuilder.Entity("CharacterManager.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BelongToBackground")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BelongToClass")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArmor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWeapon")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CharacterManager.Models.Proficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Proficiency");
                });

            modelBuilder.Entity("CharacterManager.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("DamageResistances")
                        .HasColumnType("text[]");

                    b.Property<int?>("Darkvision")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("SpeciesLanguages")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("CharacterManager.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsConcentration")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("School")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("CharacterManager.Models.Trait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UnlockAtLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("CharacterManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            Password = "admin123",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("ClassItem", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("ClassItem");
                });

            modelBuilder.Entity("ClassProficiency", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("ProficienciesId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "ProficienciesId");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("ClassProficiency");
                });

            modelBuilder.Entity("ClassSpell", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("SpellsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("ClassSpell");
                });

            modelBuilder.Entity("BackgroundItem", b =>
                {
                    b.HasOne("CharacterManager.Models.Background", null)
                        .WithMany()
                        .HasForeignKey("BackgroundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManager.Models.AbilityScore", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", "Character")
                        .WithMany("AbilityScores")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CharacterManager.Models.Background", b =>
                {
                    b.HasOne("CharacterManager.Models.Trait", "BackgroundTrait")
                        .WithMany()
                        .HasForeignKey("BackgroundTraitId");

                    b.Navigation("BackgroundTrait");
                });

            modelBuilder.Entity("CharacterManager.Models.BackgroundItem", b =>
                {
                    b.HasOne("CharacterManager.Models.Background", "Background")
                        .WithMany("BackgroundItems")
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Item", "Item")
                        .WithMany("BackgroundItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.HasOne("CharacterManager.Models.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.User", "User")
                        .WithMany("CharacterList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("Class");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterItem", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", "Character")
                        .WithMany("CharacterItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Item", "Item")
                        .WithMany("CharacterItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CharacterManager.Models.Class", b =>
                {
                    b.HasOne("CharacterManager.Models.Dice", "HitDice")
                        .WithOne()
                        .HasForeignKey("CharacterManager.Models.Class", "HitDiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CharacterManager.Models.Dice", "StartingGoldDice")
                        .WithOne("BelongToClass")
                        .HasForeignKey("CharacterManager.Models.Class", "StartingGoldDiceId");

                    b.HasOne("CharacterManager.Models.User", "user")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HitDice");

                    b.Navigation("StartingGoldDice");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassItem", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("ClassItems")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Item", "Item")
                        .WithMany("ClassItems")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassProficiency", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("ClassProficiencies")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Proficiency", "Proficiency")
                        .WithMany("ClassProficiencies")
                        .HasForeignKey("ProficienciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassSpell", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("ClassSpells")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Spell", "Spell")
                        .WithMany("ClassSpells")
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("CharacterManager.Models.Item", b =>
                {
                    b.HasOne("CharacterManager.Models.User", null)
                        .WithMany("CreatedItems")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CharacterManager.Models.Species", b =>
                {
                    b.HasOne("CharacterManager.Models.User", null)
                        .WithMany("CreatedSpecies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CharacterManager.Models.Spell", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany("Spells")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterManager.Models.Trait", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", "Character")
                        .WithMany("Traits")
                        .HasForeignKey("CharacterId");

                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("Traits")
                        .HasForeignKey("ClassId");

                    b.HasOne("CharacterManager.Models.Species", "Species")
                        .WithMany("Traits")
                        .HasForeignKey("SpeciesId");

                    b.HasOne("CharacterManager.Models.User", null)
                        .WithMany("CreatedFeats")
                        .HasForeignKey("UserId");

                    b.Navigation("Character");

                    b.Navigation("Class");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("ClassItem", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassProficiency", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Proficiency", null)
                        .WithMany()
                        .HasForeignKey("ProficienciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassSpell", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManager.Models.Background", b =>
                {
                    b.Navigation("BackgroundItems");
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Navigation("AbilityScores");

                    b.Navigation("CharacterItems");

                    b.Navigation("Spells");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("CharacterManager.Models.Class", b =>
                {
                    b.Navigation("ClassItems");

                    b.Navigation("ClassProficiencies");

                    b.Navigation("ClassSpells");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("CharacterManager.Models.Dice", b =>
                {
                    b.Navigation("BelongToClass");
                });

            modelBuilder.Entity("CharacterManager.Models.Item", b =>
                {
                    b.Navigation("BackgroundItems");

                    b.Navigation("CharacterItems");

                    b.Navigation("ClassItems");
                });

            modelBuilder.Entity("CharacterManager.Models.Proficiency", b =>
                {
                    b.Navigation("ClassProficiencies");
                });

            modelBuilder.Entity("CharacterManager.Models.Species", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("CharacterManager.Models.Spell", b =>
                {
                    b.Navigation("ClassSpells");
                });

            modelBuilder.Entity("CharacterManager.Models.User", b =>
                {
                    b.Navigation("CharacterList");

                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedFeats");

                    b.Navigation("CreatedItems");

                    b.Navigation("CreatedSpecies");
                });
#pragma warning restore 612, 618
        }
    }
}
